name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # ================================
  # 프론트엔드 테스트
  # ================================
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run type check
      working-directory: ./frontend
      run: npm run type-check
    
    - name: Run linting
      working-directory: ./frontend
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./frontend/coverage
        flags: frontend

  # ================================
  # 관리자 대시보드 테스트
  # ================================
  test-admin:
    name: Admin Dashboard Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: admin/package-lock.json
    
    - name: Install admin dependencies
      working-directory: ./admin
      run: npm ci
    
    - name: Run type check
      working-directory: ./admin
      run: npm run type-check
    
    - name: Run linting
      working-directory: ./admin
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./admin
      run: npm test -- --coverage --watchAll=false

  # ================================
  # 백엔드 테스트
  # ================================
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_storehelper
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    strategy:
      matrix:
        server: [server-a, server-b, server-c]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/${{ matrix.server }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend/${{ matrix.server }}
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Install Playwright browsers (for server-a)
      if: matrix.server == 'server-a'
      run: |
        playwright install chromium
    
    - name: Run tests
      working-directory: ./backend/${{ matrix.server }}
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_storehelper
        REDIS_URL: redis://localhost:6379
        OPENAI_API_KEY: sk-test-key
        JWT_SECRET_KEY: test-secret-key-for-testing-only
        ENVIRONMENT: test
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        directory: ./backend/${{ matrix.server }}
        flags: backend-${{ matrix.server }}

  # ================================
  # E2E 테스트
  # ================================
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Start services with Docker Compose
      run: |
        cp .env.example .env
        docker-compose up -d postgres redis
        sleep 30
    
    - name: Install Playwright
      working-directory: ./frontend
      run: |
        npm ci
        npx playwright install --with-deps chromium
    
    - name: Run E2E tests
      working-directory: ./frontend
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
      run: |
        npm run e2e
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/
        retention-days: 30

  # ================================
  # 보안 스캔
  # ================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # ================================
  # 코드 품질 검사
  # ================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ================================
  # 스테이징 배포
  # ================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-frontend, test-admin, test-backend, test-e2e]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker images
      run: |
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-api:staging --push ./backend/server-b
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-crawler:staging --push ./backend/server-a
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-scheduler:staging --push ./backend/server-c
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-frontend:staging --push ./frontend
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-admin:staging --push ./admin
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 여기에 스테이징 배포 스크립트 실행
        # 예: kubectl apply -f k8s/staging/ 또는 docker-compose 배포

  # ================================
  # 프로덕션 배포
  # ================================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-frontend, test-admin, test-backend, test-e2e, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.REGISTRY_URL }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    - name: Build and push Docker images
      run: |
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-api:latest --push ./backend/server-b
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-crawler:latest --push ./backend/server-a
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-scheduler:latest --push ./backend/server-c
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-frontend:latest --push ./frontend
        docker buildx build --platform linux/amd64 -t ${{ secrets.REGISTRY_URL }}/storehelper-admin:latest --push ./admin
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 여기에 프로덕션 배포 스크립트 실행
    
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # ================================
  # 릴리즈 노트 생성
  # ================================
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate changelog
      id: changelog
      run: |
        # 이전 태그부터 현재까지의 커밋 로그를 기반으로 체인지로그 생성
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" --no-merges)
        else
          CHANGELOG=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --no-merges)
        fi
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          ## 변경사항
          ${{ steps.changelog.outputs.changelog }}
          
          ## 배포 정보
          - 배포 시간: ${{ github.event.head_commit.timestamp }}
          - 커밋: ${{ github.sha }}
          - 배포자: ${{ github.actor }}
        draft: false
        prerelease: false