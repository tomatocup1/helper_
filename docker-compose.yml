version: '3.8'

services:
  # ================================
  # 데이터베이스 서비스
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: storehelper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: storehelper
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=ko_KR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - storehelper-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # Redis 캐시 서비스
  # ================================
  redis:
    image: redis:7-alpine
    container_name: storehelper-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - storehelper-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ================================
  # 백엔드 서비스들
  # ================================
  
  # API 서버 (서버 B)
  api-server:
    build:
      context: ./backend/server-b
      dockerfile: Dockerfile
    container_name: storehelper-api
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/storehelper
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=development
      - DEBUG=true
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    # ports:
    #   - "8000:8000"
    volumes:
      - ./backend/server-b:/app
      - ./backend/shared:/app/shared
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - storehelper-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # 크롤링 서버 (서버 A)
  crawler-server:
    build:
      context: ./backend/server-a
      dockerfile: Dockerfile
    container_name: storehelper-crawler
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/storehelper
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - NAVER_BUSINESS_EMAIL=${NAVER_BUSINESS_EMAIL}
      - NAVER_BUSINESS_PASSWORD=${NAVER_BUSINESS_PASSWORD}
      - MAX_CONCURRENT_CRAWLS=10  # 개발환경에서는 낮게 설정
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    # ports:
    #   - "8001:8001"
    volumes:
      - ./backend/server-a:/app
      - ./backend/shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - storehelper-network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]

  # 스케줄러 서버 (서버 C)
  scheduler-server:
    build:
      context: ./backend/server-c
      dockerfile: Dockerfile
    container_name: storehelper-scheduler
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/storehelper
      - REDIS_URL=redis://redis:6379
      - KAKAO_API_KEY=${KAKAO_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    # ports:
    #   - "8002:8002"
    volumes:
      - ./backend/server-c:/app
      - ./backend/shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - storehelper-network
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002", "--reload"]

  # ================================
  # Celery 워커 서비스들
  # ================================
  
  # 리뷰 크롤링 워커
  crawler-worker:
    build:
      context: ./backend/server-a
      dockerfile: Dockerfile
    container_name: storehelper-crawler-worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/storehelper
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./backend/server-a:/app
      - ./backend/shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - storehelper-network
    command: ["celery", "-A", "app.workers.celery_app", "worker", "--loglevel=info", "--concurrency=4"]

  # 스케줄러 워커
  scheduler-worker:
    build:
      context: ./backend/server-c
      dockerfile: Dockerfile
    container_name: storehelper-scheduler-worker
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/storehelper
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./backend/server-c:/app
      - ./backend/shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - storehelper-network
    command: ["celery", "-A", "app.workers.celery_app", "worker", "--loglevel=info", "--concurrency=2"]

  # Celery Beat 스케줄러
  celery-beat:
    build:
      context: ./backend/server-c
      dockerfile: Dockerfile
    container_name: storehelper-celery-beat
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/storehelper
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    volumes:
      - ./backend/server-c:/app
      - ./backend/shared:/app/shared
    depends_on:
      - postgres
      - redis
    networks:
      - storehelper-network
    command: ["celery", "-A", "app.workers.celery_app", "beat", "--loglevel=info"]

  # ================================
  # Nginx 리버스 프록시
  # ================================
  nginx:
    image: nginx:alpine
    container_name: storehelper-nginx
    restart: unless-stopped
    ports:
      - "4000:4000"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - admin-dashboard
      - api-server
      - crawler-server
      - scheduler-server
    networks:
      - storehelper-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # 프론트엔드 서비스들
  # ================================
  
  # 메인 웹 애플리케이션
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: storehelper-frontend
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NODE_ENV=development
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    # ports:
    #   - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-server
    networks:
      - storehelper-network
    command: ["npm", "run", "dev"]

  # 관리자 대시보드
  admin-dashboard:
    build:
      context: ./admin
      dockerfile: Dockerfile
      target: development
    container_name: storehelper-admin
    restart: unless-stopped
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_ADMIN_MODE=true
      - NODE_ENV=development
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    # ports:
    #   - "3001:3000"
    volumes:
      - ./admin:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-server
    networks:
      - storehelper-network
    command: ["npm", "run", "dev"]

  # ================================
  # 모니터링 서비스들 (선택사항)
  # ================================
  
  # Flower (Celery 모니터링)
  flower:
    build:
      context: ./backend/server-c
      dockerfile: Dockerfile
    container_name: storehelper-flower
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
      - CELERY_RESULT_BACKEND=redis://redis:6379
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    # ports:
    #   - "5555:5555"
    depends_on:
      - redis
    networks:
      - storehelper-network
    command: ["celery", "-A", "app.workers.celery_app", "flower", "--port=5555"]
    profiles: ["monitoring"]

  # Redis Commander (Redis 관리 도구)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: storehelper-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    # 포트를 외부에 노출하지 않음 (nginx를 통해서만 접근)
    # ports:
    #   - "8081:8081"
    depends_on:
      - redis
    networks:
      - storehelper-network
    profiles: ["monitoring"]

# ================================
# 네트워크 설정
# ================================
networks:
  storehelper-network:
    driver: bridge
    name: storehelper-network

# ================================
# 볼륨 설정
# ================================
volumes:
  postgres_data:
    name: storehelper-postgres-data
  redis_data:
    name: storehelper-redis-data